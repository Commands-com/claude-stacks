name: Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  CACHE_KEY: 'v1'

jobs:
  # Job 1: Unit and Integration Tests
  test:
    name: Test (Node ${{ matrix.node-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: ['18', '20', '22']
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch full history for better coverage reporting
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ env.CACHE_KEY }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-${{ env.CACHE_KEY }}-
            ${{ runner.os }}-node-${{ matrix.node-version }}-

      - name: Install dependencies
        run: npm ci

      - name: Run type checking
        run: npm run typecheck

      - name: Run linting
        run: npm run lint

      - name: Run unit tests
        run: npm run test:unit
        env:
          NODE_ENV: test
          CLAUDE_STACKS_TEST_MODE: true

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          CLAUDE_STACKS_TEST_MODE: true

      - name: Generate coverage report
        run: npm run test:coverage
        env:
          NODE_ENV: test
          CLAUDE_STACKS_TEST_MODE: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-${{ matrix.os }}-node${{ matrix.node-version }}
          fail_ci_if_error: false
          env_vars: OS,NODE_VERSION
        env:
          OS: ${{ matrix.os }}
          NODE_VERSION: ${{ matrix.node-version }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os }}-node${{ matrix.node-version }}
          path: |
            coverage/
            tests/results/
          retention-days: 7

  # Job 2: End-to-End Tests
  e2e:
    name: E2E Tests (Node ${{ matrix.node-version }})
    runs-on: ${{ matrix.os }}
    needs: [test, build]

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        node-version: ['20']
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Debug downloaded artifacts
        run: |
          echo "Contents of project root after download:"
          ls -la
          echo "Contents of dist directory after download:"
          ls -la dist/ || echo "dist directory not found"
          echo "All files in project:"
          find . -name "*.js" -type f | head -10

      - name: Verify CLI exists
        run: |
          if [ ! -f "dist/cli.js" ]; then
            echo "ERROR: dist/cli.js not found after downloading build artifacts"
            echo "Available files in dist/:"
            ls -la dist/ || echo "No dist directory"
            exit 1
          fi
          echo "✅ CLI file found: dist/cli.js"

      - name: Run E2E tests
        run: npx jest tests/e2e --runInBand
        env:
          NODE_ENV: test
          CLAUDE_STACKS_TEST_MODE: true

      - name: Upload E2E results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results-${{ matrix.os }}
          path: |
            tests/e2e-results/
            coverage/e2e/
          retention-days: 7

  # Job 3: Performance Tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run performance tests
        run: npm run test:performance
        env:
          NODE_ENV: test
          CLAUDE_STACKS_TEST_MODE: true

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: tests/performance-results/
          retention-days: 30

  # Job 4: Security and Quality Checks
  security:
    name: Security & Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Run dependency check
        run: npx check-outdated
        continue-on-error: true

      - name: Check for vulnerabilities
        run: npx audit-ci --moderate
        continue-on-error: true

  # Job 5: Coverage Reporting and Quality Gates
  coverage:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [test, e2e]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download test artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          merge-multiple: true
          path: ./artifacts

      - name: Merge coverage reports
        run: |
          npx nyc merge ./artifacts/coverage ./coverage/merged.json
          npx nyc report --temp-dir ./coverage --report-dir ./coverage/merged --reporter html --reporter lcov
        continue-on-error: true

      - name: Upload merged coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/merged/lcov.info
          flags: merged
          name: codecov-merged
          fail_ci_if_error: false

      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          recreate: true
          path: coverage/merged/coverage-summary.txt

  # Job 6: Build Verification
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Debug build output
        run: |
          echo "Contents of project root:"
          ls -la
          echo "Contents of dist directory:"
          ls -la dist/ || echo "dist directory not found"
          echo "Checking if cli.js exists:"
          test -f dist/cli.js && echo "✅ cli.js exists" || echo "❌ cli.js missing"

      - name: Test built CLI
        run: |
          node dist/cli.js --version
          node dist/cli.js --help

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  # Job 7: Quality Gate
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [test, e2e, performance, security, coverage, build]
    if: always()

    steps:
      - name: Check test results
        run: |
          if [[ "${{ needs.test.result }}" == "failure" ]]; then
            echo "❌ Unit/Integration tests failed"
            exit 1
          fi

          if [[ "${{ needs.e2e.result }}" == "failure" ]]; then
            echo "❌ E2E tests failed"
            exit 1
          fi

          if [[ "${{ needs.build.result }}" == "failure" ]]; then
            echo "❌ Build failed"
            exit 1
          fi

          echo "✅ All quality gates passed"

      - name: Update status
        if: always()
        run: |
          if [[ $? -eq 0 ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi

# Workflow-level settings
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Global timeout for all jobs
defaults:
  run:
    timeout-minutes: 15
